unit Departments.Model;

interface

uses
  System.SysUtils,
  Data.DB, Data.SqlExpr, Data.DBXCommon,
  Common.Types,
  Database.Model, Departments.Classes, Departments.DataModule;

type
  TDepartmentModel = class
  private
    FDepartment: TDepartment;
    FDatabaseModel: TDatabaseModel;
    FDataModule: TdmDepartments;
    FDataSet: TDataSet;
  public
    constructor Create;
    property Department: TDepartment read FDepartment;
    property DataSet: TDataSet read FDataSet;
    function GetDepartmentsDataSet: TDataSet;

    function Save(ADepartment: TDepartment): TFunctionResult;
    procedure AssignDepartmentValues;
  end;

implementation

var
  FDepartmentsSQL: string = 'select ID, TITLE, IS_ACTIVE, UPDTM from DEPARTMENTS';

{ TDepartmentModel }

procedure TDepartmentModel.AssignDepartmentValues;
begin
  FDepartment.ID        := FDataSet.FieldByName('ID').AsInteger;
  FDepartment.Title     := FDataSet.FieldByName('TITLE').AsString;
  FDepartment.IsActive  := FDataSet.FieldByName('IS_ACTIVE').AsBoolean;
end;

constructor TDepartmentModel.Create;
begin
  FDepartment := TDepartment.Create;
  FDatabaseModel := TDatabaseModel.GetInstance;
  FDataModule := TdmDepartments.Create(nil);

  FDataSet := FDataModule.cdsDepartments; //TSQLDataSet.Create(nil);
//  FDataSet.SQLConnection  := TDatabaseModel.SQLConnection;
//  FDataSet.CommandText    := FDepartmentsSQL;
end;

function TDepartmentModel.GetDepartmentsDataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDepartmentModel.Save(ADepartment: TDepartment): TFunctionResult;
begin
  try
    Result.Successful := ADepartment.IsValid;

    if not ADepartment.IsValid then Exit;

    if FDataSet.Locate('TITLE', ADepartment.Title, []) then
    begin
      ADepartment.ID := FDatabaseModel.GetSequenceNextValue('SEQ_ID_DEPARTMENTS');
      FDataSet.Append;
      FDataSet.FieldByName('ID').AsInteger := ADepartment.ID;
    end
    else
    begin
      FDataSet.Edit;
    end;
    FDataSet.FieldByName('TITLE').Value     := ADepartment.Title;
    FDataSet.FieldByName('IS_ACTIVE').Value := ADepartment.IsActive;
    FDataSet.FieldByName('UPDTM').Value     := Now;
    FDataSet.Post;
  except
    on e: Exception do Result.MessageOnError := e.Message;
  end;
end;

end.
